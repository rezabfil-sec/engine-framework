---
# Iperf default values
iperf_port: 5000

## SERVER value
# bind server to interface with ip address, default listen on all
iperf_bind: ''

## CLIENT values
# seconds to wait until trying to establish a connection
# if the server is not ready until then the client will immediately fail
iperf_client_wait: 5
# Timeout for establishing connection in milliseconds
iperf_client_timeout: 1000
# time in seconds to transmit - 24h
iperf_client_time: 86400
# limit connection bitrate - 0 = unlimited
iperf_client_limit: 0

### simulation

per_submodules_statistics:
  - {
    submodules: [
      { name: sink },
    ],
    statistics: [
      ### statistics exposed via extended module PassivePacketSinkBase
      ## default statistics for comparison with real-world results:
      # throughput
      { name: dataRate, vector_recording: yes, default: yes },
      # jitter plus packet count (for externally calculating packet loss)
      { name: packetJitter, result_recording_modes: [vector,vector(count)], vector_recording: yes, default: yes },
      ## additional statistics:
      # delay
      { name: meanBitLifeTimePerPacket, vector_recording: yes },
#      # related:
#      { name: packetDelayDifferenceToMean, vector_recording: yes },
#      { name: packetDelayVariation, vector_recording: yes },
      ]
    }
#  - {
#    submodules: [
#      { name: io },
#    ],
#    statistics: [
#      { name: packetReceived, result_recording_modes: [vector(packetBytes)], vector_recording: yes },
#    ]
#  }
  - {
    submodules: [
      { name: measurementRecorder },
    ],
    statistics: [
      # statistics per flow, using the flowName parameters set for measurementStarter could be enabled via 'flow: yes'; don't use this since the current experiments use only one flow per service
#      { name: flowDataRate, vector_recording: yes, flow: yes },
#      { name: meanBitLifeTimePerPacket, vector_recording: yes, flow: yes },
#      { name: meanBitElapsedTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalBitDelayingTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalBitProcessingTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalBitQueueingTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalBitPropagationTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalBitTransmissionTimePerPacket, vector_recording: yes, flow: yes },
      { name: meanTotalPacketTransmissionTime, vector_recording: yes, flow: yes },
#      { name: packetJitter, vector_recording: yes, flow: yes },
#      { name: packetDelayDifferenceToMean, vector_recording: yes, flow: yes },
#      { name: packetDelayVariation, vector_recording: yes, flow: yes },
    ]
  }
