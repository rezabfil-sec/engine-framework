---
# 1. Network properties
#
# network: map tsn configurations to nodes and define network paths (flows)
# tsn-configs: full tsn configuration

# ------------------------------ FLOWS + TSN-map -------------------------------
network:
  net-1:
    tsn:
      tsn-13: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-2:
    tsn:
      tsn-14: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-3:
    tsn:
      tsn-15: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-4:
    tsn:
      tsn-10: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  # ETF Experiments
  net-5:
    tsn:
      tsn-4: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-6:
    tsn:
      tsn-5: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-7:
    tsn:
      tsn-6: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-8:
    tsn:
      tsn-7: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-9:
    tsn:
      tsn-8: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-10:
    tsn:
      tsn-9: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-11:
    tsn:
      tsn-10: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-19:
    tsn:
      tsn-11: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-20:
    tsn:
      tsn-12: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!


  net-40:
    tsn:
      tsn-30: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-41:
    tsn:
      tsn-31: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-42:
    tsn:
      tsn-32: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-43:
    tsn:
      tsn-33: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-44:
    tsn:
      tsn-34: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-45:
    tsn:
      tsn-35: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-46:
    tsn:
      tsn-36: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-47:
    tsn:
      tsn-37: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-48:
    tsn:
      tsn-38: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-49:
    tsn:
      tsn-39: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!

  net-50:
    tsn:
      tsn-40: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
  net-51:
    tsn:
      tsn-41: ["node-9:2", "node-1:3"]
    flows:
      1: ":node-9:2,2:node-10:"
      2: ":node-1:3,3:node-2:"
      #PTP Flow for rod todd
      3: ":node-9:3,3:node-10:"
      4: ":node-2:1,3:node-3:1,4:node-1:"
    check: true
    num_net_cores: 3 # Specify the number of cores assigned to NIC IRQs. Cores beginning with core 0 will be allocated to the IRQs. E.g. if specified to 2 means that IRQs will be allocated to cores 0 and 1
    nic_irq_rt: true # Specify if the NIC IRQs will be set to real-time priority in the linux kernel. Requires the low latency kernel!!
# ------------------------------ TSN configs -----------------------------------
# NOTES:
# - number of queue items is fixed depending on the number of hardware queues (Intel i210 = 4)
# - available priorities for the prio list go from 0 to 15
# - all priorities need to be assigned to the queues, use '*' in one queue for remaining priorities
# Use queue 0 in a taprio sched for a guard band
# ETF offload can only be set for queue 1 or 2, limitation of the intel i210 network card
# ETF queues together with taprio must be used with txtime enabled or only special (timestamped) traffic works
#
# IMPORTANT:
# ! Queue priorities MUST not overlap
# ! Map all 16 priorities to queues or use '*' in one of the queues
# ! All taprio Schedule durations MUST sum up to a factor of 1ms
#

tsnconfigs: # TSN configurations for nodes/interfaces
  # ETF EXPERIMENTS
  tsn-4:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 100000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 100000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-5:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 125000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 125000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-6:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 150000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 150000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-7:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 175000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 175000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-8:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 200000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 200000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-9:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 225000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 225000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-10:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 250000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 250000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-11:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 275000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 275000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-12:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 300000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 300000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }
  
  tsn-13:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 25000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 25000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }
  tsn-14:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 50000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 50000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }
  
  tsn-15:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 75000, offload: no } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 75000, deadline: no } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }
  tsn-30:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 25000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 25000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-31:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 50000, offload: yes } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 50000, offload: yes  } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }
  
  tsn-32:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 75000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 75000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }


  tsn-33:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 100000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 100000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-34:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 125000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 125000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-35:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 150000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 150000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-36:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 175000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 175000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-37:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 200000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 200000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-38:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 225000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 225000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-39:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 250000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 250000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-40:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 275000, offload: yes} # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 275000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }

  tsn-41:
    name: MQPRIO with ETF in Strict and Strict mode
    taprio: {}
    queues: # Configuration of individual HW queues, delta - fudge factor of ETF
      1: { mode: etf, prio: [3], delta: 300000, offload: yes } # Supports HW offloading
      2: { mode: etf, prio: [2], delta: 300000, offload: yes } # Support HW offloading
      3: { mode: be, prio: [1,'*'] }