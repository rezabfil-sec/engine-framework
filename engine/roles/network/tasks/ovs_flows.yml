---
# OVS flow configuration

# make sure openvswitch is installed
- name: check ovs is available
  command: which ovs-vsctl

- name: clear all ovs flows
  command: ovs-ofctl del-flows ovs0

- name: default ovs drop flow
  command: ovs-ofctl mod-flows ovs0 priority=0,actions=drop

- name: check if OvS running and get its PID
  shell: pidof ovs-vswitchd
  register: check_ovs_vswitchd
  failed_when: check_ovs_vswitchd.rc != 0

- name: set affinity of OvS Switch to use net cores
  shell: "taskset -p $(((1 << {{ network[experiment.network].num_net_cores }}) - 1)) {{ check_ovs_vswitchd.stdout_lines[0] }}"
  when: network[experiment.network].num_net_cores is defined and network[experiment.network].num_net_cores > 0

- name: store ovs flows in a file
  copy:
    content: "{{ flows | tojson }}"
    dest: "{{ remote_flow_file }}"

# Used for NDN where per-flow priorities are needed
- name: store flow priorities
  copy:
    content: "{{ flow_prio | tojson }}"
    dest: "{{ remote_flow_prio_file }}"
  when: flow_prio is defined

- name: create ovs flows without priorities
  script: files/ovs_flows.py --flowfile {{ remote_flow_file }} --vlanid {{ iface_vlan_id }} --node {{ node }} {{ "--arp_entries" if ( network[experiment.network].arp_entries is defined and network[experiment.network].arp_entries ) }}
  register: flow_ifaces_raw

- name: set used raw interfaces
  set_fact:
    use_ifaces: '{{ flow_ifaces_raw.stdout_lines[-3] }}'

- name: set flow interfaces
  set_fact:
    flow_ifaces: '{{ flow_ifaces_raw.stdout_lines[-2] }}'

- name: set used raw peer interface tuples
  set_fact:
    peer_ifaces: '{{ flow_ifaces_raw.stdout_lines[-1] }}'

# Cgroups setup per application
- block:
  - name: copy flow cgroup priority script to node
    template:
      src: 'cgroup_priorities_flow.sh'
      dest: '{{ data_path }}/cgroup_priorities_flow.sh'
      mode: '0755'

  - name: execute flow cgroup priority script
    command: 'bash {{ data_path }}/cgroup_priorities_flow.sh'
  
  # when: ndn is defined and not ndn or ndn is not defined

# Cgroups setup per flow
- block:
  - name: get flow - prio pairing
    script: files/flow_prio.py --flowfile {{ remote_flow_file }} --flowprios {{ remote_flow_prio_file }} --vlanid {{ iface_vlan_id }} --node {{ node }}
    register: flow_prio_mapping

  - debug:
      msg: "flow-prio pairing: {{ flow_prio_mapping.stdout_lines }}"
      
  - name: apply global flow priorities
    shell: 'echo "{{ item }}" > /sys/fs/cgroup/net_prio/net_prio.ifpriomap'
    loop: '{{ flow_prio_mapping.stdout_lines }}'

  when: ndn is defined and ndn

# disable all hardware interfaces, only enable the ones used in a flow
# -> prevent message leaking to other topologies running concurrently in the testbed
- name: disable all hardware interfaces
  command: ip link set {{ item.value.name }} down
  loop: '{{ node_ifaces | dict2items }}'

- name: enable used flow hardware interfaces
  command: ip link set {{ item.value.name }} up
  when: (item.key | string ) in use_ifaces
  loop: '{{ node_ifaces | dict2items }}'

- name: check if low latency kernel used when real-time priority for IRQs specified
  fail: 
    msg: IRQs cannot be set to real-time priority without the low-latency kernel!
  when: (network[experiment.network].nic_irq_rt is defined and network[experiment.network].nic_irq_rt) and ((use_low_latency_kernel is defined and not use_low_latency_kernel | bool) or use_low_latency_kernel is not defined)


# Prepare the NIC IRQs for real-time priority
- name: set real-time priority for used interfaces
  shell: 'top -b -n 1 | pgrep {{ item.value.name }} | while read -r p; do chrt -p 99 $p; done'
  loop: '{{ node_ifaces | dict2items }}'
  when: (item.key | string ) in use_ifaces and use_low_latency_kernel is defined and use_low_latency_kernel | bool and network[experiment.network].nic_irq_rt is defined and network[experiment.network].nic_irq_rt

# TODO change here to only use the ifaces which are supported
- debug:
    msg: "Used interfaces {{ node_ifaces | dict2items }}"

# Pin NIC IRQs to the first two of the isolated CPUS
- name: set affinity for IRQs related to the used interfaces
  shell: 'ls /sys/class/net/{{ item.value.name }}/device/msi_irqs/ | while read -r p; do printf "%x" $((1 << $p% {{ network[experiment.network].num_net_cores }})) > /proc/irq/$p/smp_affinity; done'
  loop: '{{ node_ifaces | dict2items }}'
  when: (item.key | string ) in use_ifaces and network[experiment.network].num_net_cores is defined and network[experiment.network].num_net_cores > 0 # and network[experiment.network].num_net_cores <= num_isolated_cores
